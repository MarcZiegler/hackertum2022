// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity", "interactiveTransactions"]
}

datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

model User {
  id                  Int                   @id @default(autoincrement())
  username            String
  isRealUser          Boolean               @default(true) // is the user a real user or controlled by a server
  MarketActionHistory MarketActionHistory[]
  MarketAction        MarketAction[]
  Money               Float                 @default(10000)
  token               String                @unique @default(uuid())
  follows  Follows[] @relation("follows")
  followedBy Follows[] @relation("followedBy")
  pnl                   Float @default(0)
}

model Follows {
    followsId Int
    followedByID Int
    follows   User     @relation(fields: [followsId], references: [id], name: "follows")
    followedBy  User     @relation(fields: [followedByID], references: [id], name: "followedBy")
    @@unique([followsId, followedByID])
}

enum TypeOfMarketAction {
  BUY
  SELL
}

enum TypeOfChange {
  Add
  Delete
}

model Ticker {
  id            Int                   @id @default(autoincrement())
  ticker        String                @unique @db.VarChar(10)
  name          String
  marketActions MarketActionHistory[]
  MarketAction  MarketAction[]
  TickerHistory TickerHistory[]
}

model MarketActionHistory {
  id                 Int                @id @default(autoincrement())
  typeOfMarketAction TypeOfMarketAction
  typeOfChange       TypeOfChange
  user               User               @relation(fields: [userId], references: [id])
  userId             Int
  createdAt          DateTime           @default(now())
  ticker             Ticker             @relation(fields: [tickerId], references: [id])
  tickerId           Int
  marketAction       MarketAction?      @relation(fields: [marketActionId], references: [id], onDelete: SetNull)
  marketActionId     Int?
  price              Float
  tickerHistory      TickerHistory[]
  shares             Int
}

model MarketAction {
  id                 Int                @id @default(autoincrement())
  typeOfMarketAction TypeOfMarketAction
  user               User               @relation(fields: [userId], references: [id])
  userId             Int
  ticker             Ticker             @relation(fields: [tickerId], references: [id])
  tickerId           Int

  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  MarketActionHistory MarketActionHistory[]
  price               Float
  shares              Int

  @@unique([userId, tickerId, typeOfMarketAction, price])
}

model TickerHistory {
  id            Int                   @id @default(autoincrement())
  ticker        Ticker                @relation(fields: [tickerId], references: [id])
  tickerId      Int
  executed_at   DateTime              @default(now())
  amount        Int
  price         Float
  marketActions MarketActionHistory[]
}
